/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import logica.JugadorUsuario;
import logica.JugadorException;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.WARNING_MESSAGE;


/**
 *
 * @author Guillermo Perales Gallar
 */
public class Inicio extends javax.swing.JFrame {

    public Inicio() throws  ClassNotFoundException, FileNotFoundException, IOException {
        initComponents();
        if(archivoTabla.exists()){
            this.fisJugadores = new FileInputStream("Jugadores.dat");
            this.oisJugadores = new ObjectInputStream(fisJugadores);
            ArrayList<String> listaJugadores = new ArrayList<>();
            String[] lista = null;
            Inicio.tablaJugadores =  (HashMap<String, JugadorUsuario>) oisJugadores.readObject();
            System.out.println(tablaJugadores.toString());
            if(!tablaJugadores.isEmpty()){
                int i;
                for(JugadorUsuario value :tablaJugadores.values()){
                    listaJugadores.add(value.getNIF()+"  Nombre:"+value.getNombre()+" "+value.getApellido1()+" "+value.getApellido2());  
                }
                lista = new String[listaJugadores.size()];
                for(i=0;i<listaJugadores.size();i++){
                    lista[i] = listaJugadores.get(i);
                }
            }
            listJugadores.setListData(lista);
            oisJugadores.close();
        }
        else{
            Inicio.tablaJugadores = new HashMap<>();
        }
        
        
        
        


    }

    private static JugadorUsuario usuario;

    private static HashMap<String,JugadorUsuario> tablaJugadores;
    private FileOutputStream fosJugadores;
    private ObjectOutputStream oosJugadores;
    ;
    private FileInputStream fisJugadores;
    private ObjectInputStream oisJugadores;
    private final File archivoTabla = new File("Jugadores.dat");

    /**
     * Gracias a estos métodos estáticos se pueden pasar datos entre jframes
     *
     * @param usuario
     */
    public static void setUsuario(JugadorUsuario usuario) {
        Inicio.usuario = usuario;
    }

    public static JugadorUsuario getUsuario() {
        return Inicio.usuario;
    }
    
    public static void setTablaJugadores(HashMap tablaJugadores) {
        Inicio.tablaJugadores = tablaJugadores;
    }

    public static HashMap getTablaJugadores() {
        return Inicio.tablaJugadores;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFondo = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        botRegistro = new javax.swing.JButton();
        nombreLabel = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        apellido1Label = new javax.swing.JLabel();
        txtApellido1 = new javax.swing.JTextField();
        Label = new javax.swing.JLabel();
        txtApellido2 = new javax.swing.JTextField();
        nifLabel = new javax.swing.JLabel();
        txtNIF = new javax.swing.JTextField();
        botSalida = new javax.swing.JButton();
        spinnerFecha = new javax.swing.JSpinner();
        jLabelFechaNacimiento = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listJugadores = new javax.swing.JList<>();
        botJugar = new javax.swing.JButton();
        botRanking = new javax.swing.JButton();
        botFicha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro HAMATE");

        jPanelFondo.setBackground(new java.awt.Color(204, 255, 204));
        jPanelFondo.setLayout(null);

        titulo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titulo.setForeground(new java.awt.Color(0, 0, 255));
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("HAMATE");
        titulo.setToolTipText("");
        jPanelFondo.add(titulo);
        titulo.setBounds(273, 12, 169, 29);

        botRegistro.setText("Registro");
        botRegistro.setToolTipText("");
        botRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botRegistroActionPerformed(evt);
            }
        });
        jPanelFondo.add(botRegistro);
        botRegistro.setBounds(250, 270, 90, 30);

        nombreLabel.setText("Nombre:");
        jPanelFondo.add(nombreLabel);
        nombreLabel.setBounds(59, 85, 61, 17);
        jPanelFondo.add(txtNombre);
        txtNombre.setBounds(214, 80, 218, 27);

        apellido1Label.setText("Primer Apellido:");
        jPanelFondo.add(apellido1Label);
        apellido1Label.setBounds(59, 118, 109, 17);
        jPanelFondo.add(txtApellido1);
        txtApellido1.setBounds(214, 113, 218, 27);

        Label.setText("Segundo Apellido:");
        jPanelFondo.add(Label);
        Label.setBounds(59, 151, 125, 17);
        jPanelFondo.add(txtApellido2);
        txtApellido2.setBounds(214, 146, 218, 27);

        nifLabel.setText("NIF:");
        jPanelFondo.add(nifLabel);
        nifLabel.setBounds(59, 184, 26, 17);
        jPanelFondo.add(txtNIF);
        txtNIF.setBounds(214, 179, 218, 27);

        botSalida.setText("Salir");
        botSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botSalidaActionPerformed(evt);
            }
        });
        jPanelFondo.add(botSalida);
        botSalida.setBounds(320, 330, 70, 29);

        spinnerFecha.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1522616100000L), null, null, java.util.Calendar.DAY_OF_WEEK_IN_MONTH));
        jPanelFondo.add(spinnerFecha);
        spinnerFecha.setBounds(253, 224, 85, 28);

        jLabelFechaNacimiento.setText("Fecha de Nacimiento");
        jPanelFondo.add(jLabelFechaNacimiento);
        jLabelFechaNacimiento.setBounds(59, 229, 145, 17);

        listJugadores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listJugadores);

        jPanelFondo.add(jScrollPane2);
        jScrollPane2.setBounds(501, 76, 281, 165);

        botJugar.setText("Jugar");
        botJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botJugarActionPerformed(evt);
            }
        });
        jPanelFondo.add(botJugar);
        botJugar.setBounds(500, 270, 90, 29);

        botRanking.setText("Ranking");
        botRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botRankingActionPerformed(evt);
            }
        });
        jPanelFondo.add(botRanking);
        botRanking.setBounds(430, 330, 90, 29);

        botFicha.setText("Crear Ficha");
        botFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botFichaActionPerformed(evt);
            }
        });
        jPanelFondo.add(botFicha);
        botFicha.setBounds(660, 270, 110, 29);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botRegistroActionPerformed
        
        String nombre = txtNombre.getText();
        String apellido1 = txtApellido1.getText();
        String apellido2 = txtApellido2.getText();
        String nif = txtNIF.getText();
        Date fechaNaci = (Date) spinnerFecha.getValue();
        LocalDate fechaNacimiento = fechaNaci.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate fechaActual = LocalDate.now();
        usuario = new JugadorUsuario(Color.blue);
        usuario.setNombre(nombre);
        usuario.setApellido1(apellido1);
        usuario.setApellido2(apellido2);
        usuario.setNIF(nif);
        usuario.setFechaNacimiento(fechaNaci.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        usuario.setPartidasJugadas(0);
        usuario.setPartidasGanadas(0);
        usuario.setCartasGanadas(0);
        
        try {
            
            this.fosJugadores = new FileOutputStream("Jugadores.dat");
            this.oosJugadores = new ObjectOutputStream(fosJugadores);
            if (usuario.getNombre().equals("")) {
                throw new JugadorException(JugadorException.NOMBRE_INCORRECTO);
            }
            if (usuario.getApellido1().equals("")) {
                throw new JugadorException(JugadorException.APELLIDO1_INCORRECTO);
            }
            if (usuario.getApellido2().equals("")) {
                throw new JugadorException(JugadorException.APELLIDO2_INCORRECTO);
            }
            if (usuario.getNIF().length() != 9 || !Character.isDigit(usuario.getNIF().charAt(0))
                    || !Character.isDigit(usuario.getNIF().charAt(0)) || !Character.isDigit(usuario.getNIF().charAt(1))
                    || !Character.isDigit(usuario.getNIF().charAt(2)) || !Character.isDigit(usuario.getNIF().charAt(3))
                    || !Character.isDigit(usuario.getNIF().charAt(4)) || !Character.isDigit(usuario.getNIF().charAt(5))
                    || !Character.isDigit(usuario.getNIF().charAt(6)) || !Character.isDigit(usuario.getNIF().charAt(7))
                    || !Character.isLetter(usuario.getNIF().charAt(8)))                
            {
                throw new JugadorException(JugadorException.NIF_INCORRECTO);
            }
            Period diferencia = Period.between(fechaNacimiento, fechaActual);
            if (diferencia.getYears() < 18) {
                throw new JugadorException(JugadorException.EDAD_INCORRECTA);
            }
            for (Map.Entry<String, JugadorUsuario> entry : tablaJugadores.entrySet()) {
                if(entry.getKey().equals(usuario.getNIF()))throw new JugadorException(JugadorException.USUARIO_YA_REGISTRADO);
                if(entry.getValue().getNombre()==usuario.getNombre() && entry.getValue().getApellido1().equals(usuario.getApellido1())
                        && entry.getValue().getApellido2().equals(usuario.getApellido2()))throw new JugadorException(JugadorException.USUARIO_YA_REGISTRADO);

            }
            setUsuario(usuario);
            tablaJugadores.put(usuario.getNIF(), usuario);
            oosJugadores.writeObject(tablaJugadores);
            oosJugadores.close();
            setTablaJugadores(tablaJugadores);
            ModoJuego ventanaModoJuego = new ModoJuego();
            ventanaModoJuego.setVisible(true);
            dispose();

        } catch (JugadorException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", WARNING_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_botRegistroActionPerformed

    private void botSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botSalidaActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_botSalidaActionPerformed

    private void botJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botJugarActionPerformed
        // TODO add your handling code here:
        if(listJugadores.isSelectionEmpty())JOptionPane.showMessageDialog(this,"Selecciona un jugador", "Error", HEIGHT);
        else{
            String jugador = listJugadores.getSelectedValue();
            String NIF = jugador.substring(0, 9);
            setUsuario(tablaJugadores.get(NIF));
            ModoJuego ventanaModoJuego = new ModoJuego();
            ventanaModoJuego.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_botJugarActionPerformed

    private void botRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botRankingActionPerformed
        // TODO add your handling code here:
        Ranking ranking = new Ranking();
        ranking.setVisible(true);
    }//GEN-LAST:event_botRankingActionPerformed

    private void botFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botFichaActionPerformed
        // TODO add your handling code here:
        if(listJugadores.isSelectionEmpty())JOptionPane.showMessageDialog(this,"Selecciona un jugador", "Error", HEIGHT);
        else{
            try {
                String jugador = listJugadores.getSelectedValue();
                String NIF = jugador.substring(0, 9);
                String ruta = "fichas/"+NIF+".txt";
                JugadorUsuario usu = tablaJugadores.get(NIF);
                File ficha = new File(ruta);
                BufferedWriter bw;
                if(ficha.exists()){JOptionPane.showMessageDialog(this,"La ficha estaba creada, se ha actualizado." ,"Ficha creada", JOptionPane.INFORMATION_MESSAGE);}
                else JOptionPane.showMessageDialog(this, "La ficha se ha creado en fichas/"+NIF+".txt", "Ficha creada", JOptionPane.INFORMATION_MESSAGE);
                bw = new BufferedWriter(new FileWriter(ficha));
                bw.write("Nombre:\t\t\t"+usu.getNombre()+"\nPrimer Apellido:\t"+usu.getApellido1()+"\nSegundo Apellido:\t"+usu.getApellido2()+"\nNIF:\t\t\t"+usu.getNIF()+"\nFecha Nacimiento:\t"+String.valueOf(usu.getFechaNacimiento().getDayOfMonth())+"/"+String.valueOf(usu.getFechaNacimiento().getMonthValue())+"/"+String.valueOf(usu.getFechaNacimiento().getYear())+"\nPuntos Totales:\t\t"+String.valueOf(usu.getPuntos())+"\nPartidas Jugadas:\t"+String.valueOf(usu.getPartidasJugadas())+"\nPartidas Ganadas:\t"+String.valueOf(usu.getPartidasGanadas())+"\nCartas Ganadas:\t\t"+String.valueOf(usu.getCartasGanadas())+"\nPuntos Por Partida:\t"+String.valueOf(usu.getPuntosPorPartida())+"\nCartas Por Partida:\t"+String.valueOf(usu.getCartasPorPartida()));
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_botFichaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Inicio().setVisible(true);
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel Label;
    javax.swing.JLabel apellido1Label;
    javax.swing.JButton botFicha;
    javax.swing.JButton botJugar;
    javax.swing.JButton botRanking;
    javax.swing.JButton botRegistro;
    javax.swing.JButton botSalida;
    javax.swing.JLabel jLabelFechaNacimiento;
    javax.swing.JPanel jPanelFondo;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JList<String> listJugadores;
    javax.swing.JLabel nifLabel;
    javax.swing.JLabel nombreLabel;
    javax.swing.JSpinner spinnerFecha;
    javax.swing.JLabel titulo;
    javax.swing.JTextField txtApellido1;
    javax.swing.JTextField txtApellido2;
    javax.swing.JTextField txtNIF;
    javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
